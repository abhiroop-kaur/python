#constellations of galaxy

import sys
import os
import turtle

# STARTER CONSTANTS
BACKGROUND_COLOR = "black"
WIDTH = 600
HEIGHT = 600
# AXIS CONSTANTS
AXIS_COLOR = "blue"
# STAR CONSTANTS
STAR_COLOR = "white"
STAR_COLOR2 = "grey"
TICK_SIZE = 5
TICK_DISTANCE = 0.25


def get_colour():
    """

    :return:
    """



def draw_axes(pointer):
    """

    :return:
    """
    # Drawing the y and x-axis according to given graph size
    pointer.penup()
    pointer.color(AXIS_COLOR)
    pointer.goto(WIDTH/2, 0)
    pointer.pendown()
    pointer.goto(WIDTH/2, HEIGHT)
    pointer.penup()
    pointer.goto(0, HEIGHT/2)
    pointer.pendown()
    pointer.goto(WIDTH, HEIGHT/2)
    pointer.penup()


    positive_x_origin = 0
    positive_y_origin = 0
    negative_x_origin = 0
    negative_y_origin = 0
    y_axis_x_origin = 0

    # Drawing the ticks and labels for the x-axis
    while positive_x_origin < 1:
        x_coord = WIDTH/2 + (WIDTH / 2 * positive_x_origin)
        y_coord = HEIGHT/2 + (HEIGHT / 2 * positive_y_origin)
        pointer.penup()
        pointer.goto(x_coord, y_coord + TICK_SIZE)
        pointer.pendown()
        pointer.goto(x_coord, y_coord - TICK_SIZE)
        pointer.penup()
        pointer.goto(x_coord, y_coord - 20)
        x_coord_label = str("{:.2f}".format(positive_x_origin))
        pointer.write(x_coord_label)
        positive_x_origin += TICK_DISTANCE

    while negative_x_origin > -1:
        x_coord = WIDTH/2 + (WIDTH/2 * negative_x_origin)
        y_coord = HEIGHT/2 + (HEIGHT / 2 * positive_y_origin)
        pointer.penup()
        pointer.goto(x_coord, y_coord + TICK_SIZE)
        pointer.pendown()
        pointer.goto(x_coord, y_coord - TICK_SIZE)
        pointer.penup()
        pointer.goto(x_coord - 8, y_coord - 20)
        x_coord_label = str("{:.2f}".format(negative_x_origin))
        pointer.write(x_coord_label)
        negative_x_origin -= TICK_DISTANCE

    while positive_y_origin < 1:
        x_coord = WIDTH/2 + (WIDTH/2 * y_axis_x_origin)
        y_coord = HEIGHT/2 + (HEIGHT/2 * positive_y_origin)
        pointer.penup()
        pointer.goto(x_coord + TICK_SIZE, y_coord)
        pointer.pendown()
        pointer.goto(x_coord - TICK_SIZE, y_coord)
        pointer.penup()
        pointer.goto(x_coord - 20 , y_coord)
        pointer.write("{:.2f}".format(positive_y_origin))
        positive_y_origin += TICK_DISTANCE

    while negative_y_origin >= -1:
        x_coord = WIDTH/2 + (WIDTH/2 * y_axis_x_origin)
        y_coord = HEIGHT/2 + (HEIGHT/2 * negative_y_origin)
        pointer.penup()
        pointer.goto(x_coord + TICK_SIZE, y_coord)
        pointer.pendown()
        pointer.goto(x_coord - TICK_SIZE, y_coord)
        pointer.penup()
        pointer.goto(x_coord - 20, y_coord)
        pointer.write("{:.2f}".format(negative_y_origin))
        negative_y_origin -= TICK_DISTANCE

def check_the_file(star_location_file):
    while star_location_file != "":
        if os.path.isfile(star_location_file) == False:
            print("Program cannot access stars location file.")
            star_location_file = input("Enter a star's location file: ")
        else:
            return star_location_file

def reads_input_file():
    """

    :return:
    """
    if len(sys.argv) == 1:
        star_location_file = input("Enter a star's location file: ")
        star_file = check_the_file(star_location_file)
    elif len(sys.argv) == 2:
        if sys.argv[1] == "-names":
            star_location_file = input("Enter a star's location file: ")
            star_file = check_the_file(star_location_file)
        elif sys.argv[1] != "-names":
            star_location_file = sys.argv[1]
            star_file = check_the_file(star_location_file)
    elif len(sys.argv) == 3:
        if sys.argv[1] != '-names' and sys.argv[2] == "-names":
            star_location_file = sys.argv[1]
            star_file = check_the_file(star_location_file)
        elif sys.argv[1] == '-names' and sys.argv[2] !='-names':
            star_location_file = sys.argv[2]
            star_file = check_the_file(star_location_file)
        elif sys.argv[1] != "-names" and sys.argv[2] != "-names":
            print("Invalid input as neither input was '-names'")
            sys.exit()
    elif len(sys.argv) > 3:
        print("Invalid input as there are too many argument entered.")
        sys.exit()
    return star_file

def read_star_information(star_file):
    star_list = []
    star_dictionary = {}

    try:
        file_open = open(star_file, "r")
        for line in file_open:
            file_line = line.split(",")
            file_line_stripped = []
            for i in line:
                new_item = i.rstrip("\n")
                file_line_stripped.append(new_item)
            x = float(file_line_stripped[0])
            y  = float(file_line_stripped[1])
            mag = float(file_line_stripped[4])
            # names = file_line_stripped[6]
            # split_name = names.split(";")
            if len(file_line) == 6:
                no_name_star = (x,y,mag)
                star_list.append(no_name_star)
            else:
                names = file_line_stripped[6]
                split_name = names.split(";")
                named_star = (x,y,mag,split_name)
                for key in split_name:
                    star_dictionary[key] = named_star
                    print(key.upper(), "is at", (x,y), "with magnitude", mag)

    except:
        print("Star file information of wrong type or has too many entries, program cannot compute.")
        sys.exit()
    else:
        return star_list, star_dictionary
    finally:
        file_open.close()

def draw_stars(pointer,star_list,):
    pass

def setup():
    """
    Setup the turtle window and return drawing pointer
    :return: Turtle pointer for drawing
    """
    turtle.bgcolor(BACKGROUND_COLOR)
    turtle.setup(WIDTH, HEIGHT, 0, 0)
    screen = turtle.getscreen()
    screen.delay(delay=0)
    screen.setworldcoordinates(0, 0, WIDTH, HEIGHT)
    pointer = turtle
    pointer.hideturtle()
    pointer.speed(0)
    pointer.up()
    return pointer



def main():
    """
    Main constellation program
    :return: None
    """
    # Handle arguments
    pointer = setup()
    # Read star information from file (function)
    # Draw Axes (function)
    draw_axes(pointer)

    star_location_file = reads_input_file()
    star_list, star_dictionary = read_star_information(star_location_file)
    # Draw Stars (function)
    # Loop getting filenames
    #while False:
        # Read constellation file (function)
        # Draw Constellation (function)
        # Draw bounding box (Bonus) (function)
        #pass


main()

print("\nClick on window to exit!\n")
turtle.exitonclick()
